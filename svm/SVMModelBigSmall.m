function [dataBigSmall, bigData, smallData, modelSVMBigSmall,...
                            sAttributes, bAttributes, newAttributesTypes, newAttributes] = SVMModelBigSmall(trainData,...
                                                                                                          Attributes,...
                                                                                                          AttributesTypes,...
                                                                                                          target_attribute,...
                                                                                                          trainRatio,...
                                                                                                          randSeedIn,...
                                                                                                          bigGroup,...
                                                                                                          remove,...
                                                                                                          XVal,...
                                                                                                          oneMod,...
                                                                                                          Labels)

% prepare new data for habitat class - First Level
[dataBigSmall, bigData, smallData, newAttributesTypes, newAttributes,...
    sAttributes, bAttributes] = createBigSmallClasses(trainData, Attributes, AttributesTypes, target_attribute, bigGroup);


% SVM Training data for Big/Small
disp(['Training Data: ' num2str(trainRatio) '%, Total Data: ' num2str(numel(dataBigSmall(:,1)))])

[dataBigSmallRand, ~, ~] = matrixRandomize(dataBigSmall, randSeedIn);
[~, modelSVMBigSmall, ~, ~, ~, ~, ~] = SVMModelBuildTest('belongs_to',...
    remove, [], trainRatio, XVal, oneMod, dataBigSmallRand, Labels, newAttributes, newAttributesTypes);

end